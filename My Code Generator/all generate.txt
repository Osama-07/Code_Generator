        public static string AddNew(string TableName, TextBox Parameters)
        {
            StringBuilder code = new StringBuilder();

            // Generate Add Record (INSERT) Code
            code.Append($"public static int AddNew{TableName}(");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                if (i == Parameters.Lines.Count() - 1)
                {
                    code.Append($"{Parameters.Lines[i]}"); // without seperator in last parameter.
                    break;
                }

                code.Append($"{Parameters.Lines[i]}, ");
            }

            code.AppendLine(")");
            code.AppendLine("{");
            code.AppendLine("     int RecordID = -1;");
            code.AppendLine();
            code.Append($"    string query = @\"INSERT INTO {TableName} (");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                string[] Text = Parameters.Lines[i].Split(' ');

                if (i == Parameters.Lines.Count() - 1)
                {
                    code.Append($"{Text[1]}"); // without seperator in last parameter.
                    break;
                }

                code.Append($"{Text[1]}, ");
            }

            code.AppendLine(")");
            code.AppendLine("                           VALUES");

            code.Append("                           (");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                string[] Text = Parameters.Lines[i].Split(' ');

                //Text.StartsWith("string") ? Text.Remove(0, 6) : Text.StartsWith("int") ? Text.Remove(0, 3) : Text.StartsWith("byte") ? Text.Remove(0, 4) :;
                //Text.Replace("int", "");
                //Text.Replace("byte", "");

                if (i == Parameters.Lines.Count() - 1)
                {

                    code.Append($"@{Text[1]}"); // without seperator in last parameter.
                    break;
                }

                code.Append($"@{Text[1]}, ");
            }

            code.Append(")");
            code.AppendLine();
            code.AppendLine("                           SELECT SCOPE_IDENTITY();\";");
            code.AppendLine();
            code.AppendLine("    using (SqlConnection Connection = new SqlConnection(clsSettingsDataAccess.ConnectionString))");
            code.AppendLine("    {");
            code.AppendLine("        using (SqlCommand Command = new SqlCommand(query, Connection))");
            code.AppendLine("        {");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                string[] Text = Parameters.Lines[i].Split(' ');

                code.AppendLine($"            Command.Parameters.AddWithValue(\"@{Text[1]}\", {Text[1]});");
            }
            code.AppendLine();
            code.AppendLine("            try");
            code.AppendLine("            {");
            code.AppendLine("               Connection.Open();");
            code.AppendLine();
            code.AppendLine("               object result = Command.ExecuteScalar();");
            code.AppendLine();
            code.AppendLine("               if (result != null && int.TryParse(result.ToString(), out int ID))");
            code.AppendLine("               {");
            code.AppendLine("                   RecordID = ID;");
            code.AppendLine("               }");
            code.AppendLine();
            code.AppendLine("            }");
            code.AppendLine("            catch(Exception ex)");
            code.AppendLine("            {");
            code.AppendLine("               MessageBox.Show(\"Error: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\r\n");
            code.AppendLine("            }");
            code.AppendLine("            finally");
            code.AppendLine("            {");
            code.AppendLine("               Connection.Close();");
            code.AppendLine("            }");
            code.AppendLine("        }");
            code.AppendLine("    }");
            code.AppendLine();
            code.AppendLine("    return RecordID;");
            code.AppendLine("}");

            code.AppendLine();

            return code.ToString();
        }

        public static string Find(string TableName, TextBox Parameters)
        {
            StringBuilder code = new StringBuilder();

            // Generate Update Record (UPDATE) Code
            code.Append($"public static bool Find{TableName}(");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                if (i == Parameters.Lines.Count() - 1)
                {
                    code.Append($"ref {Parameters.Lines[i]}"); // without seperator in last parameter.
                    break;
                }

                code.Append($"ref {Parameters.Lines[i]}, ");
            }

            code.AppendLine(")");
            code.AppendLine("{");
            code.AppendLine("    bool Found = false;");
            code.AppendLine();
            code.AppendLine($"    string query = @\"SELECT * FROM {TableName}");
            code.AppendLine($"                           WHERE {Parameters.Lines[0].Split(' ')[1]} = @{Parameters.Lines[0].Split(' ')[1]}\"; // Here Primary key ID of the table");
            code.AppendLine("");
            code.AppendLine("    using (SqlConnection Connection = new SqlConnection(clsSettingsDataAccess.ConnectionString))");
            code.AppendLine("    {");
            code.AppendLine("        using (SqlCommand Command = new SqlCommand(query, Connection))");
            code.AppendLine("        {");
            code.AppendLine($"          Command.Parameters.AddWithValue(\"@{Parameters.Lines[0].Split(' ')[1]}\", {Parameters.Lines[0].Split(' ')[1]});");
            code.AppendLine("");
            code.AppendLine("            try");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Open();");
            code.AppendLine("");
            code.AppendLine("                SqlDataReader reader = Command.ExecuteReader();");
            code.AppendLine("");
            code.AppendLine("                if (reader.Read())");
            code.AppendLine("                {");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                string[] Text = Parameters.Lines[i].Split(' ');

                code.AppendLine($"                  {Text[1]} = ({Text[0]})reader[\"{Text[1]}\"];");
            }

            code.AppendLine();
            code.AppendLine("                Found = true;");
            code.AppendLine("                }");
            code.AppendLine("            }");
            code.AppendLine("            catch(Exception ex)");
            code.AppendLine("            {");
            code.AppendLine("                MessageBox.Show(\"Error: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);");
            code.AppendLine("");
            code.AppendLine("                Found = false;");
            code.AppendLine("            }");
            code.AppendLine("            finally");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Close();");
            code.AppendLine("            }");
            code.AppendLine("");
            code.AppendLine("            return Found;");
            code.AppendLine("        }");
            code.AppendLine("    }");
            code.AppendLine("}");

            code.AppendLine();

            return code.ToString();
        }

        public static string Update(string TableName, TextBox Parameters)
        {
            StringBuilder code = new StringBuilder();

            // Generate Update Record (UPDATE) Code
            code.Append($"public static bool Update{TableName}(");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                if (i == Parameters.Lines.Count() - 1)
                {
                    code.Append($"{Parameters.Lines[i]}"); // without seperator in last parameter.
                    break;
                }

                code.Append($"{Parameters.Lines[i]}, ");
            }

            code.AppendLine(")");
            code.AppendLine("{");
            code.AppendLine("    bool Updated = false;");
            code.AppendLine();
            code.AppendLine($"    string query = @\"UPDATE {TableName}");
            code.AppendLine("                           SET ");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                string[] Text = Parameters.Lines[i].Split(' ');

                if (i == Parameters.Lines.Count() - 1)
                {
                    code.AppendLine($"                              {Text[1]} = @{Text[1]}");
                    break;
                }

                code.AppendLine($"                              {Text[1]} = @{Text[1]},");
            }

            code.AppendLine("                           WHERE ID = @ID\"; // Here Primary key ID of the table");
            code.AppendLine("");
            code.AppendLine("    using (SqlConnection Connection = new SqlConnection(clsSettingsDataAccess.ConnectionString))");
            code.AppendLine("    {");
            code.AppendLine("        using (SqlCommand Command = new SqlCommand(query, Connection))");
            code.AppendLine("        {");

            for (int i = 0; i < Parameters.Lines.Count(); i++)
            {
                string[] Text = Parameters.Lines[i].Split(' ');

                code.AppendLine($"          Command.Parameters.AddWithValue(\"@{Text[1]}\", {Text[1]});");
            }

            code.AppendLine("");
            code.AppendLine("            try");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Open();");
            code.AppendLine("");
            code.AppendLine("                Command.ExecuteNonQuery();");
            code.AppendLine("");
            code.AppendLine("                Updated = true;");
            code.AppendLine("            }");
            code.AppendLine("            catch(Exception ex)");
            code.AppendLine("            {");
            code.AppendLine("                MessageBox.Show(\"Error: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);");
            code.AppendLine("");
            code.AppendLine("                Updated = false;");
            code.AppendLine("            }");
            code.AppendLine("            finally");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Close();");
            code.AppendLine("            }");
            code.AppendLine("");
            code.AppendLine("            return Updated;");
            code.AppendLine("        }");
            code.AppendLine("    }");
            code.AppendLine("}");

            code.AppendLine();

            return code.ToString();
        }

        public static string IsExists(string TableName)
        {
            StringBuilder code = new StringBuilder();

            // Generate Is Exist Record (SELECT COUNT) Code
            code.AppendLine($"public static bool IsExist{TableName}(int id)");
            code.AppendLine("{");
            code.AppendLine("    bool Exists = false;");
            code.AppendLine("");
            code.AppendLine($"    string query = @\"SELECT 1 FROM {TableName}");
            code.AppendLine("                    WHERE ID = @ID\";");
            code.AppendLine("");
            code.AppendLine("    using (SqlConnection Connection = new SqlConnection(clsSettingsDataAccess.ConnectionString))");
            code.AppendLine("    {");
            code.AppendLine("        using (SqlCommand Command = new SqlCommand(query, Connection))");
            code.AppendLine("        {");
            code.AppendLine("            Command.Parameters.AddWithValue(\"@ID\", id);");
            code.AppendLine("");
            code.AppendLine("            try");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Open();");
            code.AppendLine("");
            code.AppendLine("                int count = (int)Command.ExecuteScalar();");
            code.AppendLine("");
            code.AppendLine("                Exists = count > 0;");
            code.AppendLine("            }");
            code.AppendLine("            catch (Exception ex)");
            code.AppendLine("            {");
            code.AppendLine("                MessageBox.Show($\"Error: + {ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);");
            code.AppendLine("            }");
            code.AppendLine("            finally");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Close();");
            code.AppendLine("            }");
            code.AppendLine("        }");
            code.AppendLine("    }");
            code.AppendLine("");
            code.AppendLine("    return Exists;");
            code.AppendLine("}");

            code.AppendLine();

            return code.ToString();
        }

        public static string Delete(string TableName)
        {
            StringBuilder code = new StringBuilder();

            // Generate Delete Record (DELETE) Code
            code.AppendLine($"public static bool Delete{TableName}(int id)");
            code.AppendLine("{");
            code.AppendLine("    bool Deleted = false;");
            code.AppendLine("");
            code.AppendLine($"    string query = @\"DELETE FROM {TableName}");
            code.AppendLine("                         WHERE ID = @ID\";");
            code.AppendLine("");
            code.AppendLine("    using (SqlConnection Connection = new SqlConnection(clsSettingsDataAccess.ConnectionString))");
            code.AppendLine("    {");
            code.AppendLine("        using (SqlCommand Command = new SqlCommand(query, Connection))");
            code.AppendLine("        {");
            code.AppendLine("            Command.Parameters.AddWithValue(\"@ID\", id);");
            code.AppendLine("");
            code.AppendLine("            try");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Open();");
            code.AppendLine("");
            code.AppendLine("                Command.ExecuteNonQuery();");
            code.AppendLine("");
            code.AppendLine("                Deleted = true;");
            code.AppendLine("            }");
            code.AppendLine("            catch(Exception ex)");
            code.AppendLine("            {");
            code.AppendLine("                MessageBox.Show($\"Error: + {ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);");
            code.AppendLine("                Deleted = false;");
            code.AppendLine("            }");
            code.AppendLine("            finally");
            code.AppendLine("            {");
            code.AppendLine("                Connection.Close();");
            code.AppendLine("            }");
            code.AppendLine("        }");
            code.AppendLine("    }");
            code.AppendLine("");
            code.AppendLine("    return Deleted;");
            code.AppendLine("}");

            code.AppendLine();

            return code.ToString();
        }

        public static string GetAllCode(string TableName, TextBox Parameters)
        {
            StringBuilder Code = new StringBuilder();

            Code.AppendLine(AddNew(TableName, Parameters));
            Code.AppendLine(Find(TableName, Parameters));
            Code.AppendLine(Update(TableName, Parameters));
            Code.AppendLine(IsExists(TableName));
            Code.AppendLine(Delete(TableName));

            return Code.ToString();
        }